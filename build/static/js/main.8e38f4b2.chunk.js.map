{"version":3,"sources":["actions/tabAction.js","actions/types.js","actions/movieAction.js","components/Header/Header.jsx","actions/pageAction.js","actions/searchAction.js","actions/filterSortAction.js","categories.js","components/SearchContainer/MovieSearchInfo.jsx","components/SearchContainer/SearchResult.jsx","components/AdvancedView/WordCloudView.jsx","actions/wordCloudAction.js","components/AdvancedView/AdvancedView.jsx","components/PopularMovies/PopularMovies.jsx","components/SearchContainer/ExpandSearch.jsx","actions/expandAction.js","components/SearchContainer/SearchOptions.jsx","components/SearchContainer/Search.jsx","components/SearchContainer/SearchContainer.jsx","reducers/filterSortReducer.js","reducers/movieReducer.js","reducers/index.js","reducers/searchReducer.js","reducers/expandReducer.js","reducers/tabReducer.js","reducers/pageReducer.js","reducers/wordCloudReducer.js","store.js","App.js","serviceWorker.js","index.js","img/mongoflix.png"],"names":["handleTabChange","tab","type","fetchMoviesByTitle","title","page","byDate","dispatch","sort","search","replace","fetch","then","res","json","resJSON","payload","fetchAllMovies","fetchFilteredMovies","genres","genreList","i","length","slice","fetchFilteredTitleMovies","fetchOneCategory","category","fetchMostPopular","handleReset","console","log","useStyles","makeStyles","theme","button","margin","spacing","input","display","connect","state","tabReducer","pageReducer","filterSort","filterSortReducer","inputValue","searchReducer","changeToTab1","changeToTab2","changeToTab3","props","classes","id","src","logo","alt","Button","variant","className","onClick","root","width","paddingBottom","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","movImg","height","body","backgroundColor","movieText","toast","configure","handleVote","e","target","value","split","voteValue","movieID","localStorage","getItem","axios","post","data","Vote","error","Movie","CurrentVotes","success","notify","setItem","info","movies","movie","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","Poster","Typography","Title","DateString","ExpansionPanelDetails","component","Director","Genre","map","genre","Actors","Plot","_id","Votes","SearchResult","handlePageUpdate","pageLoadMorelicked","handleLoadMore","categories","key","push","handleEmptySearch","count","handleTitleSearch","handleFilterAndTitleSearch","handleFilteredSearch","getNextPopular","getNextCategory","this","Results","Component","result","wordCloudReducer","word","fontSizeMapper","Math","log2","rotate","wordClick","style","onWordClick","text","window","scrollTo","ExpandSearch","expandedClick","expand","expandReducer","flexWrap","justifyContent","formControl","filter","isExpanded","filterChanged","checked","filterSortChange","handleChange","event","FormControl","FormLabel","FormGroup","FormControlLabel","control","Checkbox","onChange","color","label","Search","pageReset","handleResetPage","checkSearch","resetMovies","name","handleChangedInput","placeholder","href","initialState","combineReducers","action","concat","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8e38f4b2.chunk.js","sourcesContent":["import {TAB_CHANGED} from './types';\r\n\r\n// When the user switches tab in the menu\r\nexport const handleTabChange = (tab) => {\r\n    return {\r\n        type: TAB_CHANGED,\r\n        tab\r\n    }\r\n}\r\n\r\n","export const FETCH_MOVIE = 'FETCH_MOVIE';\r\nexport const RESET_MOVIE = 'RESET_MOVIE';\r\nexport const EXPAND_MOVIE = \"EXPAND_MOVIE\";\r\nexport const UPDATE_TEXT = 'UPDATE_TEXT';\r\nexport const EXPAND = 'EXPAND';\r\nexport const FILTERSORT_CHANGED = 'FILTERSORT_CHANGED';\r\nexport const TAB_CHANGED = 'TAB_CHANGED';\r\nexport const LOAD_MORE = 'LOAD_MORE';\r\nexport const WORD_CLICKED = 'WORD_CLICKED';\r\nexport const RESET_PAGE = 'RESET_PAGE'; \r\nexport const RESET_TEXT = 'RESET_TEXT';  \r\nexport const RESET_FILTERSORT = 'RESET_FILTERSORT';  \r\n\r\n\r\n\r\n\r\n\r\n","import {FETCH_MOVIE} from './types'; \r\nimport {RESET_MOVIE} from './types'; \r\n\r\n/* Fetch movies only by the title, max 10. Gets page so the backend know which movies to give\r\nChecks if sort is checked as well*/\r\nexport const fetchMoviesByTitle = (title, page, byDate) => dispatch =>{\r\n    let sort;\r\n    if(!byDate) {\r\n        sort = \"alpha\"\r\n    }\r\n    else if(byDate) {\r\n        sort = \"date\"\r\n    }\r\n    let search = title.replace(\" \", \"+\")\r\n    fetch(\"http://localhost:3000/\"+sort+\"/title=\"+search+\"&page=\"+page)\r\n    .then(res => res.json())\r\n    .then(resJSON => \r\n        dispatch({\r\n            type: FETCH_MOVIE,\r\n            payload: resJSON,\r\n        })\r\n    );\r\n};\r\n\r\n/* When there is an empty search, all movies will be fetched, 10 for each \r\ntime this function is called. Gets page so the backend know which movies to give\r\n   Checks if sort is checked as well*/\r\nexport const fetchAllMovies = (page, byDate) => dispatch =>{\r\n    let sort;\r\n    if(!byDate) {\r\n        sort = \"alpha\"\r\n    }\r\n    else if(byDate) {\r\n        sort = \"date\"\r\n    }\r\n    fetch(\"http://localhost:3000/\"+sort+\"/all&page=\" + page)\r\n    .then(res => res.json())\r\n    .then(resJSON => \r\n        dispatch({\r\n            type: FETCH_MOVIE,\r\n            payload: resJSON,\r\n        })\r\n    );\r\n};\r\n\r\n/* Fetches max 10 movies with no search input, but with filtered categories\r\nGets page so the backend know which movies to give\r\n   Checks if sort is checked as well */\r\nexport const fetchFilteredMovies = (page, genres, byDate) => dispatch =>{\r\n    let sort;\r\n    if(!byDate) {\r\n        sort = \"alpha\"\r\n    }\r\n    else if(byDate) {\r\n        sort = \"date\"\r\n    }\r\n    var genreList = \"\"\r\n    for (var i = 0; i < genres.length; i++) {\r\n        genreList += genres[i] + \"+\";\r\n      }\r\n    genreList = genreList.slice(0,-1)\r\n    fetch(\"http://localhost:3000/\"+sort+\"/genres=\"+genreList+\"&page=\" + page)\r\n    .then(res => res.json())\r\n    .then(resJSON => \r\n        dispatch({\r\n            type: FETCH_MOVIE,\r\n            payload: resJSON,\r\n        })\r\n    );\r\n};\r\n\r\n/* Fetch max. 10 movies with search input, filtered categories. \r\nGets page so the backend know which movies to give\r\n   Checks if sort is checked as well */\r\nexport const fetchFilteredTitleMovies = (page, title, genres, byDate) => dispatch =>{\r\n    let sort;\r\n    if(!byDate) {\r\n        sort = \"alpha\"\r\n    }\r\n    else if(byDate) {\r\n        sort = \"date\"\r\n    }\r\n\r\n    var genreList = \"\"\r\n    for (var i = 0; i < genres.length; i++) {\r\n        genreList += genres[i] + \"+\";\r\n      }\r\n    genreList = genreList.slice(0,-1)\r\n    let search = title.replace(\" \", \"+\")\r\n\r\n    fetch(\"http://localhost:3000/f/\"+sort+\"/title=\"+search+\"&genre=\"+genreList+\"&page=\" + page)\r\n    .then(res => res.json())\r\n    .then(resJSON => \r\n        dispatch({\r\n            type: FETCH_MOVIE,\r\n            payload: resJSON,\r\n        })\r\n    );\r\n};\r\n\r\n/* Gets triggered when the user clicks on a category in the wordcloud\r\nFetches 10 movies in a given category*/\r\nexport const fetchOneCategory = (category, page) => dispatch =>{\r\n    fetch(\"http://localhost:3000/alpha/genres=\"+category+\"&page=\" + page)\r\n    .then(res => {\r\n        return res.json()\r\n    })\r\n    .then(resJSON => {\r\n        dispatch({\r\n            type: FETCH_MOVIE,\r\n            payload: resJSON,\r\n        })\r\n    }\r\n    );\r\n};\r\n\r\n/* Gets triggered when the user click on \"Most popular tab\"\r\nFetches 10 movies, sorted by number of votes, showing the highest\r\nnumber of votes first*/\r\nexport const fetchMostPopular = (page) => dispatch =>{\r\n    fetch(\"http://localhost:3000/vote/all&page=\" + page)\r\n    .then(res => {\r\n        return res.json()\r\n    })\r\n    .then(resJSON => {\r\n        dispatch({\r\n            type: FETCH_MOVIE,\r\n            payload: resJSON,\r\n        })\r\n    }\r\n    );\r\n};\r\n\r\n/* Resets the movie result saved in the store. Gets triggered when the user\r\nchanges tab or is done with a search, i.e clicked on the search button*/\r\nexport const handleReset = () =>{\r\n    console.log(\"movie reset reached\")\r\n    return {\r\n        type: RESET_MOVIE\r\n    }\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {handleTabChange} from '../../actions/tabAction';\r\nimport {fetchMostPopular, handleReset} from '../../actions/movieAction';\r\nimport logo from \"../../img/mongoflix.png\"\r\nimport {resetPage} from '../../actions/pageAction';\r\nimport {resetSearch} from '../../actions/searchAction';\r\nimport { resetFilterSort } from '../../actions/filterSortAction';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport './Header.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    input: {\r\n      display: 'none',\r\n    },\r\n  }));\r\n\r\nconst Header = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <nav id='header'>\r\n            <h1><img id=\"mongoflixLogo\" src={logo} alt=\"mongoflix\"></img></h1>\r\n            <Button variant=\"contained\" className={classes.button} id=\"SearchPage\" onClick={() => props.changeToTab1(1)}>Search</Button>\r\n            <Button variant=\"contained\" className={classes.button} id=\"showFavourite\" onClick={() => props.changeToTab2(2, props.page)}>Show popular</Button>\r\n            <Button variant=\"contained\" className={classes.button} id=\"advancedView\" onClick={() => props.changeToTab3(3)}>Advanced view</Button>\r\n        </nav>\r\n    );\r\n};\r\n\r\n// Maps the global redux-state to props\r\nconst mapStateToProps = state => ({\r\n    tab: state.tabReducer,\r\n    page: state.pageReducer,\r\n    filterSort: state.filterSortReducer,\r\n    inputValue: state.searchReducer\r\n})\r\n\r\n// Receives the dispatch() method and returns callback-props\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    changeToTab1: (tab) => {\r\n        dispatch(handleReset());\r\n        dispatch(resetPage());\r\n        dispatch(handleTabChange(tab));\r\n    },\r\n    changeToTab2: (tab, page) => {\r\n        dispatch(handleReset());\r\n        dispatch(resetPage());\r\n        dispatch(resetSearch())\r\n        dispatch(resetFilterSort())\r\n        dispatch(fetchMostPopular(page));\r\n        dispatch(handleTabChange(tab));\r\n    },\r\n    changeToTab3: (tab) => {\r\n        dispatch(handleReset());\r\n        dispatch(resetPage());\r\n        dispatch(handleTabChange(tab));\r\n        dispatch(resetSearch())\r\n        dispatch(resetFilterSort())\r\n\r\n    },\r\n\r\n})\r\n\r\n\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import {LOAD_MORE} from './types';\r\nimport {RESET_PAGE} from './types';\r\n\r\n// When the user clicks on the \"load more button\"\r\nexport const handleLoadMore = () => {\r\n    return {\r\n        type: LOAD_MORE,\r\n    }\r\n}\r\n\r\n// When the user changes tab in the menu\r\nexport const resetPage = () => {\r\n    return {\r\n        type: RESET_PAGE\r\n    }\r\n}","import {UPDATE_TEXT} from './types';\r\nimport {RESET_TEXT} from './types';\r\n\r\n// When the user has written a search in the input field\r\nexport const handleSearch = (title) => {\r\n    return {\r\n        type: UPDATE_TEXT,\r\n        title\r\n    }\r\n}\r\n\r\n// When the user has switched tabs in the menu or is done with a search\r\nexport const resetSearch = () => {\r\n    return {\r\n        type: RESET_TEXT,\r\n        \r\n    }\r\n}","import {FILTERSORT_CHANGED} from './types';\r\nimport {RESET_FILTERSORT} from './types';\r\n\r\n\r\n// Gets triggered when someone checked/unchecked a filter category or sort by date\r\nexport const filterSortChange = (category, checked) => {\r\n    return {\r\n        type: FILTERSORT_CHANGED,\r\n        category,\r\n        checked,\r\n    }\r\n}\r\n\r\n// Gets triggered when the user changed tab from the search page\r\nexport const resetFilterSort = () => {\r\n    return {\r\n        type: RESET_FILTERSORT\r\n    }\r\n}","export default [\r\n  {\r\n      \"text\": \"Action\",\r\n      \"value\": 1194\r\n  },\r\n  {\r\n      \"text\": \"Adventure\",\r\n      \"value\": 935\r\n  },\r\n  {\r\n      \"text\": \"Fantasy\",\r\n      \"value\": 602\r\n  },\r\n  {\r\n      \"text\": \"Sci-Fi\",\r\n      \"value\": 628\r\n  },\r\n  {\r\n      \"text\": \"Thriller\",\r\n      \"value\": 1438\r\n  },\r\n  {\r\n      \"text\": \"Animation\",\r\n      \"value\": 236\r\n  },\r\n  {\r\n      \"text\": \"Comedy\",\r\n      \"value\": 1852\r\n  },\r\n  {\r\n      \"text\": \"Family\",\r\n      \"value\": 525\r\n  },\r\n  {\r\n      \"text\": \"Musical\",\r\n      \"value\": 134\r\n  },\r\n  {\r\n      \"text\": \"Romance\",\r\n      \"value\": 1084\r\n  },\r\n  {\r\n      \"text\": \"Mystery\",\r\n      \"value\": 523\r\n  },\r\n  {\r\n      \"text\": \"Western\",\r\n      \"value\": 111\r\n  },\r\n  {\r\n      \"text\": \"Drama\",\r\n      \"value\": 2577\r\n  },\r\n  {\r\n      \"text\": \"History\",\r\n      \"value\": 224\r\n  },\r\n  {\r\n      \"text\": \"Sport\",\r\n      \"value\": 181\r\n  },\r\n  {\r\n      \"text\": \"Horror\",\r\n      \"value\": 570\r\n  },\r\n  {\r\n      \"text\": \"Crime\",\r\n      \"value\": 891\r\n  },\r\n  {\r\n      \"text\": \"War\",\r\n      \"value\": 218\r\n  },\r\n  {\r\n      \"text\": \"Biography\",\r\n      \"value\": 308\r\n  },\r\n  {\r\n      \"text\": \"Music\",\r\n      \"value\": 215\r\n  },\r\n  {\r\n      \"text\": \"Documentary\",\r\n      \"value\": 119\r\n  },\r\n  {\r\n      \"text\": \"Short\",\r\n      \"value\": 21\r\n  },\r\n  {\r\n      \"text\": \"News\",\r\n      \"value\": 5\r\n  },\r\n  {\r\n      \"text\": \"Film-Noir\",\r\n      \"value\": 6\r\n  },\r\n  {\r\n      \"text\": \"Reality-TV\",\r\n      \"value\": 1\r\n  }\r\n];","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport axios from 'axios';\r\nimport {FaArrowAltCircleUp, FaArrowAltCircleDown} from 'react-icons/fa';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    paddingBottom: '1%'\r\n  },\r\n  heading: {\r\n    margin: 'auto',\r\n    fontSize: theme.typography.pxToRem(30),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  movImg: {\r\n    height: '10%',\r\n    width: '10%'\r\n  }, \r\n  body:{\r\n    backgroundColor: '#F5F5F5'\r\n  },\r\n  movieText:{\r\n    margin: 'auto'\r\n  }\r\n}));\r\n\r\n\r\ntoast.configure();\r\n// notifies when the user has voted, and if the user tries to vote again\r\nlet notify =(data)=>{\r\n  console.log(data)\r\n  if (data.Vote<0){\r\n    toast.error(\"You downvoted \\\"\"+data.Movie+\"\\\"\")\r\n    toast.error(\"Current votes:\"+data.CurrentVotes)\r\n  }else{\r\n    toast.success(\"You upvoted \\\"\"+data.Movie+\"\\\"\")\r\n    toast.success(\"Current votes:\"+data.CurrentVotes)\r\n  }\r\n}\r\n\r\n//handles up or down voting of a movie\r\nlet handleVote = (e) =>{\r\n  console.log(e.target.value.split(\"#\"))\r\n  let voteValue = e.target.value.split(\"#\")[1]\r\n  let movieID = e.target.value.split(\"#\")[0]\r\n  console.log(movieID)\r\n  if ((localStorage.getItem(movieID))!==\"voted\"){\r\n    axios.post(\"http://localhost:3000/vote/id=\"+movieID+\"&vote=\"+voteValue).then(res => res.data)\r\n    .then(data => notify(data))\r\n    localStorage.setItem(movieID, \"voted\")\r\n  }\r\n  else {\r\n    toast.info(\"You have already voted this movie\")\r\n  }\r\n  \r\n}\r\n\r\n\r\nconst MovieSearchInfo = (props) => {\r\n  const classes = useStyles();\r\n  const { movie } = props;\r\n\r\n \r\n  return (\r\n    <div className={classes.root} id='resultMovies'>\r\n      <ExpansionPanel >\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\">\r\n          <img className={classes.movImg} src={movie.Poster} alt=\"Logo\" />\r\n          <Typography className={classes.heading}>\r\n            {movie.Title} ({movie.DateString}) \r\n          </Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails className={classes.body}>\r\n            <Typography className={classes.movieText} component={'span'} variant={'body2'}>\r\n            <h3>Director: {movie.Director}</h3>\r\n            <h3>Genre: {movie.Genre.map(genre => genre+\" \")}</h3>\r\n            <h3>Actors: {movie.Actors}</h3>\r\n            <h3>{movie.Plot}</h3>\r\n            \r\n            \r\n            \r\n            <button id=\"upVoteBtn\" value={movie._id+\"#up\"} onClick={handleVote}><FaArrowAltCircleUp/> Upvote</button>\r\n            <button id=\"downVoteBtn\" value={movie._id+\"#down\"} onClick={handleVote}>Down <FaArrowAltCircleDown/></button>\r\n            <p> Votes: {movie.Votes}</p>\r\n            </Typography>\r\n          \r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Maps the global redux-state to props\r\nconst mapStateToProps = state => ({\r\n  movies: state.movies\r\n})\r\n\r\nexport default connect(mapStateToProps)(MovieSearchInfo);\r\n\r\n","import React,{Component} from 'react';\r\nimport MovieSearchInfo from './MovieSearchInfo.jsx'\r\nimport { connect } from 'react-redux';\r\nimport {handleLoadMore} from '../../actions/pageAction';\r\nimport {fetchMostPopular} from '../../actions/movieAction';\r\nimport {fetchOneCategory} from '../../actions/movieAction';\r\nimport { fetchMoviesByTitle, fetchAllMovies, \r\n    fetchFilteredMovies, fetchFilteredTitleMovies } from '../../actions/movieAction'\r\nimport './SearchResult.css';\r\n\r\n\r\nclass SearchResult extends Component{\r\n\r\n    // Calls mapDispatchToProps() to dispatch the function in the pageAction,\r\n    //then calls handleLoadMore()\r\n    handlePageUpdate = () => {\r\n        this.props.pageLoadMorelicked()\r\n        this.handleLoadMore()\r\n    }\r\n\r\n    //This function checks which tab the user is on. If the user is at the search page\r\n    //the function needs to check the state for the search\r\n    handleLoadMore = () => {\r\n        if(this.props.tab===1) {\r\n\r\n            //Checks the values of the filtered categories and sort in the store\r\n            let byDate = false\r\n            let categories = []\r\n            \r\n            for (var key in this.props.filterSort) {\r\n                if (key === \"byDate\") {\r\n                    byDate = this.props.filterSort[key]\r\n                } else if (this.props.filterSort[key]) {\r\n                    categories.push(key)\r\n                }\r\n            }\r\n\r\n            //handle empty search\r\n            if(this.props.inputValue==='' && categories.length===0) {\r\n                this.props.handleEmptySearch(this.props.page, byDate)  \r\n            }\r\n            \r\n            //handle only title search\r\n            else if(this.props.inputValue!== '' && categories.length===0){\r\n                console.log((\"number movies \"+this.props.count))\r\n                this.props.handleTitleSearch(this.props.inputValue,this.props.page, byDate)\r\n                \r\n            }\r\n            //handle title + genre search, fetch 10 more movies\r\n            else if(this.props.inputValue!== \"\" && categories.length>0) {\r\n                this.props.handleFilterAndTitleSearch(this.props.page, this.props.inputValue,categories, byDate)\r\n            }\r\n            //handle only genre search, fetch 10 more movies\r\n            else if(this.props.inputValue==='' && categories.length>0) {\r\n                this.props.handleFilteredSearch(this.props.page, categories, byDate)\r\n            }   \r\n        }\r\n        else if (this.props.tab===2) {\r\n            //fetch 10 more popular movies\r\n            this.props.getNextPopular(this.props.page)\r\n        }\r\n        else if(this.props.tab===3) {\r\n            //fetch 10 more movies from the category\r\n            this.props.getNextCategory(this.props.category, this.props.page)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n            <div className=\"searchResults\">\r\n            <div>{\r\n            (this.props.count!=='' && this.props.count[0].Results===0 ? <h2 id = \"no-result-msg\">No results in database</h2>:'' )}</div>\r\n                {this.props.movies.map(movie =><MovieSearchInfo key={movie._id} movie={movie}/>)}\r\n                <div>\r\n                 {this.props.count!==\"\" && ((this.props.page+1)*10 <= this.props.count[0].Results ? \r\n                 <button id = \"load-more-btn\" onClick= {() => this.handlePageUpdate()}>Load more</button> : '')}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Maps the global redux-state to props\r\nconst mapStateToProps = state => ({\r\n    page: state.pageReducer,\r\n    movies: state.movies.result,\r\n    count: state.movies.count,\r\n    tab: state.tabReducer,\r\n    category: state.wordCloudReducer,\r\n    genre: state.filterSortReducer,\r\n    byDate: state.filterSortReducer.byDate,\r\n    inputValue: state.searchReducer \r\n    \r\n})\r\n\r\n// Receives the dispatch() method and returns callback-props\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    pageLoadMorelicked: () => dispatch(handleLoadMore()),\r\n    handleTitleSearch: (title, page, byDate) => dispatch(fetchMoviesByTitle(title, page+1, byDate)),\r\n    handleEmptySearch: (page, byDate) => dispatch(fetchAllMovies(page+1, byDate)),\r\n    handleFilteredSearch: (page, categories, byDate) => dispatch(fetchFilteredMovies(page+1, categories, byDate)),\r\n    handleFilterAndTitleSearch: (page, title, categories, byDate) => dispatch(fetchFilteredTitleMovies(page+1, title, categories, byDate)),\r\n    getNextPopular: (page) => dispatch(fetchMostPopular(page+1)),\r\n    getNextCategory: (word, page) => dispatch(fetchOneCategory(word, page+1))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResult);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport categories from '../../categories';\r\nimport {handleWordClicked} from '../../actions/wordCloudAction';\r\nimport {fetchOneCategory} from '../../actions/movieAction';\r\nimport SearchResult from '../SearchContainer/SearchResult';\r\nimport WordCloud from 'react-d3-cloud';\r\n\r\n\r\nconst fontSizeMapper = word => Math.log2(word.value) * 5;\r\nconst rotate = word => word.value % 50;\r\n\r\nconst WordCloudView = (props) => {\r\n\r\n    return ( \r\n        props.tab===3 &&\r\n        <div style={{ width: '100%', height: '100%', backgroundColor:'rgba(255,255,255,0.8)'}}>\r\n          <WordCloud id = \"wordcloud\"\r\n            data={categories} \r\n            fontSizeMapper={fontSizeMapper}\r\n            rotate={rotate}\r\n            onWordClick={(word) => {props.wordClick(word.text, props.page); window.scrollTo(0,800)}}\r\n          />\r\n          {props.category!== ''? <div>\r\n          <h2 id=\"genreTitle\">Genre: {props.category} Movies</h2>  <SearchResult/>\r\n          </div> : ''} \r\n        </div> \r\n        );  \r\n}\r\n\r\n// Maps the global redux-state to props\r\nconst mapStateToProps = state => ({\r\n    category: state.wordCloudReducer,\r\n    tab: state.tabReducer,\r\n    page: state.pageReducer\r\n})\r\n\r\n// Receives the dispatch() method and returns callback-props\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    wordClick: (word, page) => {\r\n        dispatch(handleWordClicked(word));\r\n        dispatch(fetchOneCategory(word, page));\r\n    }\r\n})\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(WordCloudView);","import {WORD_CLICKED} from './types';\r\n\r\n// Gets triggered when the user has clicked on a category in the wordcloud\r\nexport const handleWordClicked = (category) => {\r\n    return {\r\n        type: WORD_CLICKED,\r\n        category\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport WordCloudView  from './WordCloudView';\r\n\r\nconst AdvancedView = (props) => {\r\n    return ( \r\n        props.tab===3 &&\r\n        <div >\r\n            <WordCloudView/>\r\n        </div> \r\n        );  \r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    tab: state.tabReducer,\r\n})\r\n\r\n \r\nexport default connect(mapStateToProps)(AdvancedView);\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport SearchResult from '../SearchContainer/SearchResult';\r\n\r\nconst PopularMovies = (props) => {\r\n\r\n    return ( \r\n        props.tab ===2 && \r\n        <div>\r\n            {props.tab=== 2 ? <div>\r\n          <h2 id= \"topMovies\">The most popular movies</h2>  <SearchResult/>\r\n          </div> : ''}\r\n        </div>\r\n        );\r\n}\r\n\r\n// Maps the global redux-state to props\r\nconst mapStateToProps = state => ({\r\n    tab: state.tabReducer\r\n})\r\n \r\nexport default connect(mapStateToProps)(PopularMovies);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {handleExpand} from '../../actions/expandAction';\r\n\r\nclass ExpandSearch extends Component {\r\n\r\n    render() { \r\n        return ( \r\n            <div id=\"expandSearch\">\r\n            <button id = \"expanson-btn\" onClick={this.props.expandedClick}>Advanced search</button>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\n// Maps the global redux-state to props\r\nconst mapStateToProps = state => ({\r\n    expand: state.expandReducer\r\n})\r\n\r\n// Receives the dispatch() method and returns callback-props\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    expandedClick: () => dispatch(handleExpand())\r\n})\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpandSearch);","import {EXPAND} from './types';\r\n\r\n// Gets triggered when someone clicked on the expand-button for advanced search\r\nexport const handleExpand = () => {\r\n    return {\r\n        type: EXPAND\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { handleSearch } from '../../actions/searchAction';\r\nimport {resetPage} from '../../actions/pageAction';\r\nimport {filterSortChange} from '../../actions/filterSortAction';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\n\r\nconst categories = [\"Action\",\r\n\"Adventure\",\r\n\"Fantasy\",\r\n\"Sci-Fi\",\r\n\"Thriller\",\r\n\"Animation\",\r\n\"Comedy\",\r\n\"Family\",\r\n\"Musical\",\r\n\"Romance\",\r\n\"Mystery\",\r\n\"Western\",\r\n\"Drama\",\r\n\"History\",\r\n\"Sport\",\r\n\"Horror\",\r\n\"Crime\",\r\n\"War\",\r\n\"Biography\",\r\n\"Music\",\r\n\"Documentary\",\r\n\"Short\",\r\n\"News\",\r\n\"Film-Noir\",\r\n\"Reality-TV\"]\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space'\r\n   \r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst SearchOptions = (props) => {\r\n  const classes = useStyles();\r\n\r\n  //When the user has checked/unchekcked a filter or sort\r\n  const handleChange = (event) => {\r\n    props.handleReset()\r\n    props.filterChanged(event.target.value, event.target.checked)\r\n    \r\n\r\n  };\r\n\r\n\r\n  return (\r\n    props.isExpanded && \r\n    <div className={classes.root} id=\"searchOptions\">\r\n      <FormControl component=\"fieldset\" className={classes.formControl}>\r\n        <FormLabel component=\"legend\">Filter</FormLabel>\r\n        <FormGroup>\r\n          {categories.map(category => \r\n            <FormControlLabel\r\n              key={category}\r\n              control={<Checkbox checked={props.filter[category] || false} onChange={(e) => handleChange(e)} value={category}  color=\"primary\"/>}\r\n              label={category}\r\n            />\r\n          )}\r\n        </FormGroup>\r\n      </FormControl>\r\n      <FormControl  component=\"fieldset\" className={classes.formControl}>\r\n        <FormLabel component=\"legend\">Sort</FormLabel>\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            control={<Checkbox checked={props.filter.byDate} onChange={(e) => handleChange(e)} value=\"byDate\" />}\r\n            label=\"By date\"\r\n          />\r\n        </FormGroup>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Maps the global redux-state to props\r\nconst mapStateToProps = state => ({\r\n    filter: state.filterSortReducer,\r\n    isExpanded: state.expandReducer\r\n})\r\n\r\n// Receives the dispatch() method and returns callback-props\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  handleReset: () =>   dispatch(resetPage()),\r\n  filterChanged: (category, checked) => {\r\n      dispatch(filterSortChange(category, checked))\r\n\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchOptions);","import React,{Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchMoviesByTitle, fetchAllMovies, \r\n    fetchFilteredMovies, fetchFilteredTitleMovies, handleReset } from '../../actions/movieAction'\r\nimport { handleSearch } from '../../actions/searchAction'; \r\nimport {resetPage} from '../../actions/pageAction';\r\nimport './Search.css';\r\n\r\nclass Search extends Component{\r\n\r\n    //In case the user already has searched before and loaded the page a few times,\r\n    //we have to reset the page before checking the search\r\n    pageReset = () => {\r\n        this.props.handleResetPage();\r\n        this.checkSearch();\r\n    }\r\n\r\n    checkSearch =() => {\r\n        /* Have to check the values of the the filtered categories and if sort by date is checked\r\n           Sends the updated values to the respective methods to dispatch the different\r\n           fetching methods*/\r\n        let byDate = false\r\n        let categories = []\r\n        \r\n        for (var key in this.props.filterSort) {\r\n            if (key === \"byDate\") {\r\n                byDate = this.props.filterSort[key]\r\n            } else if (this.props.filterSort[key]) {\r\n                categories.push(key)\r\n            }\r\n        }\r\n        \r\n        //handle empty search\r\n        if(this.props.inputValue==='' && categories.length===0) {\r\n            this.props.handleEmptySearch(this.props.page, byDate)  \r\n        }\r\n        \r\n        //handle only title search\r\n        else if(this.props.inputValue!== '' && categories.length===0){\r\n            this.props.handleTitleSearch(this.props.inputValue,this.props.page, byDate)\r\n        }\r\n        //handle title + genre search\r\n        else if(this.props.inputValue!== \"\" && categories.length>0) {\r\n            this.props.handleFilterAndTitleSearch(this.props.page, this.props.inputValue,categories, byDate)\r\n        }\r\n        //handle only genre search\r\n        else if(this.props.inputValue==='' && categories.length>0) {\r\n            this.props.handleFilteredSearch(this.props.page, categories, byDate)\r\n        }\r\n        this.props.resetMovies()   \r\n        this.props.handleResetPage()\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"searchBox\">\r\n                <div>\r\n                    <input id=\"searchInput\" type=\"text\" name=\"title\" \r\n                    onChange={(e) => this.props.handleChangedInput(e)} value={this.props.inputValue} \r\n                    placeholder=\"Type a movie title, or nothing to show all\"/>\r\n                    <a id=\"searchBtn\" href=\"#resultMovies\" onClick={() => {this.pageReset(); window.scrollTo(0,800);}}>Search</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Maps the global redux-state to props\r\nconst mapStateToProps = state => ({\r\n    movies: state.movies,\r\n    inputValue: state.searchReducer,\r\n    page: state.pageReducer,\r\n    filterSort: state.filterSortReducer\r\n\r\n    \r\n});\r\n\r\n// Receives the dispatch() method and returns callback-props\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    handleResetPage: () => dispatch(resetPage()),\r\n    handleTitleSearch: (title, page, byDate) => dispatch(fetchMoviesByTitle(title, page, byDate)),\r\n    handleEmptySearch: (page, byDate) => dispatch(fetchAllMovies(page, byDate)),\r\n    handleFilteredSearch: (page, categories, byDate) => dispatch(fetchFilteredMovies(page, categories, byDate)),\r\n    handleFilterAndTitleSearch: (page, title, categories, byDate) => dispatch(fetchFilteredTitleMovies(page, title, categories, byDate)),\r\n    handleChangedInput: (event) => {\r\n        // dispatch(resetPage()),\r\n        dispatch(handleSearch(event.target.value))\r\n    },\r\n    resetMovies: () => dispatch(handleReset())\r\n    \r\n\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Search);\r\n","import React, { Component } from 'react';\r\nimport ExpandSearch from './ExpandSearch';\r\nimport SearchOptions from './SearchOptions';\r\nimport Search from './Search';\r\nimport SearchResult from './SearchResult';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\nconst SearchContainer = (props) => { \r\n        return ( \r\n            props.tab ===1 && \r\n            <div  id=\"search-container\">\r\n                <div>\r\n                <Search id =\"search\"/>\r\n                </div>\r\n                <ExpandSearch />\r\n                <SearchOptions/>\r\n                <SearchResult />\r\n            </div>\r\n         );\r\n}\r\n\r\n// Maps the global redux-state to props\r\nconst mapStateToProps = state => ({\r\n    tab: state.tabReducer\r\n})\r\n \r\nexport default connect(mapStateToProps)(SearchContainer);\r\n","import {FILTERSORT_CHANGED} from '../actions/types';\r\nimport {RESET_FILTERSORT} from '../actions/types';\r\n\r\nconst initialState = {\r\n    byDate: false,\r\n    categories: ''\r\n}\r\n\r\n//Evaluates the type and updates the state accordingly\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case FILTERSORT_CHANGED:\r\n            return {\r\n                ...state,\r\n                [action.category]: action.checked,\r\n            }\r\n        case RESET_FILTERSORT:\r\n        return {\r\n               category:\"\",\r\n               byDate: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {FETCH_MOVIE} from '../actions/types'; \r\nimport {RESET_MOVIE} from '../actions/types'; \r\n\r\nconst initialState = {\r\n    result: [],\r\n    count: ''\r\n};\r\n\r\n//Evaluates the type and updates the state accordingly\r\nexport default function(state=initialState, action){\r\n    switch(action.type){\r\n        case FETCH_MOVIE:\r\n            return {\r\n                result: state.result.concat(action.payload.slice(0, -1)),\r\n                count: action.payload.slice(-1) \r\n            };\r\n        case RESET_MOVIE:        \r\n            return {\r\n                result: [],\r\n                count: ''\r\n            };\r\n        default: \r\n        return state; \r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport searchReducer from './searchReducer';\r\nimport filterSortReducer from './filterSortReducer';\r\nimport expandReducer from './expandReducer';\r\nimport movieReducer from './movieReducer';\r\nimport tabReducer from './tabReducer';\r\nimport pageReducer from './pageReducer';\r\nimport wordCloudReducer from './wordCloudReducer';\r\n\r\n// Turns an object into a single reducer function that you can pass to createStore()\r\nexport default combineReducers({\r\n    movies: movieReducer,\r\n    searchReducer: searchReducer,\r\n    filterSortReducer: filterSortReducer,\r\n    expandReducer: expandReducer ,\r\n    tabReducer: tabReducer,\r\n    pageReducer: pageReducer,\r\n    wordCloudReducer: wordCloudReducer\r\n});","import {UPDATE_TEXT} from '../actions/types';\r\nimport {RESET_TEXT} from '../actions/types';\r\n\r\n//Evaluates the type and updates the state accordingly\r\nexport default function(state = '', action) {\r\n    switch(action.type) {\r\n        case UPDATE_TEXT:\r\n            return action.title\r\n        case RESET_TEXT:\r\n            return ''\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import {EXPAND} from '../actions/types';\r\n\r\n//Evaluates the type and updates the state accordingly\r\nexport default function(state = false, action) {\r\n    switch(action.type) {\r\n        case EXPAND:\r\n            return !state;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {TAB_CHANGED} from '../actions/types';\r\n\r\n//Evaluates the type and updates the state accordingly\r\nexport default function(state = 1, action) {\r\n    switch(action.type) {\r\n        case TAB_CHANGED:\r\n            return action.tab\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import {LOAD_MORE} from '../actions/types';\r\nimport {RESET_PAGE} from '../actions/types';\r\n\r\n//Evaluates the type and updates the state accordingly\r\nexport default function(state = 0, action) {\r\n    switch(action.type) {\r\n        case LOAD_MORE:\r\n            return state + 1\r\n        case RESET_PAGE:\r\n            return state = 0\r\n        default:\r\n            return state;\r\n    }\r\n}","import {WORD_CLICKED} from '../actions/types';\r\n\r\n//Evaluates the type and updates the state accordingly\r\nexport default function(state = '', action) {\r\n    switch(action.type) {\r\n        case WORD_CLICKED:\r\n            return action.category\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\n/* The store holds the complete state tree of our app. We compose redux devtools to\r\n   be able to debug the application easier in chrome */\r\n\r\n// If you have a developer tool for redux on your browser,remove the commented out code\r\n// inside compose\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n      applyMiddleware(...middleware),\r\n      //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n      \r\n    )\r\n  );\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Provider}from 'react-redux';\r\nimport Header from './components/Header/Header'\r\nimport AdvancedView from './components/AdvancedView/AdvancedView'\r\nimport PopularMovies from './components/PopularMovies/PopularMovies'\r\nimport SearchContainer from './components/SearchContainer/SearchContainer'\r\nimport store from './store'\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}> \r\n      <div className=\"App\">\r\n        <Header />\r\n        <SearchContainer/>\r\n        <PopularMovies/>\r\n        <AdvancedView/>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.js';\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//STORE - GLOBALIZED STATE\r\n//let store = createStore(reducer);\r\n\r\n//ACTION , i.e increment or expansion, describes what you can do\r\n// const regSearch = () => {\r\n//     return {\r\n//         type: 'REGULARSEARCH'\r\n//     }\r\n// }\r\n\r\n// const advSearch = () => {\r\n//     return {\r\n//         type: 'ADVANCEDSEARCH'\r\n//     }\r\n// }\r\n\r\n// const sortChanged = () => {\r\n//     return {\r\n//         type: 'SORTCHANGED'\r\n//     }\r\n// }\r\n\r\n// const filterChanged = () => {\r\n//     return {\r\n//         type: 'FILTERCHANGED'\r\n//     }\r\n// }\r\n\r\n// const likeMovie = () => {\r\n//     return {\r\n//         type: 'LIKEMOVIE'\r\n//     }\r\n// }\r\n// const EXPANDSEARCHFIELD = () => {\r\n//     return {\r\n//         type: 'EXPANDSEARCHFIELD'\r\n//     }\r\n// }\r\n\r\n// const reduceSearchField = () => {\r\n//     return {\r\n//         type: 'REDUCESEARCHFIELD'\r\n//     }\r\n// }\r\n\r\n//REDUCER\r\n\r\n\r\n\r\n//DISPATCH\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/mongoflix.2b2c1397.png\";"],"sourceRoot":""}